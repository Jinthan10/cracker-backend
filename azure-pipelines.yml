trigger:
- main  # Trigger when changes happen in main branch

pool:
  name: Default  # Using your self-hosted agent

variables:
  ACR_NAME: 'backendapli'      # Your Azure Container Registry name
  IMAGE_NAME: 'backendapp'     # Docker image name
  TAG: 'latest'                # Tag for the image
  RESOURCE_GROUP: 'demo'       # Your resource group name
  CONTAINER_NAME: 'cracker-backend'  # Azure Container Instance name
  LOCATION: 'eastus'           # Azure region

stages:
# --------------------------
# Stage 1: Build & Push Image
# --------------------------
- stage: Build
  displayName: 'Build & Push Docker Image'
  jobs:
  - job: BuildJob
    displayName: 'Build and Push Docker Image'
    steps:

    # Step 1 â€” Checkout code
    - checkout: self
      clean: true

    # Step 2 â€” Login to Azure
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'mypip-fixed'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "âœ… Logged into Azure successfully."
          az account show

    # Step 3 â€” Build and Push Docker Image to ACR
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: 'mypip1'  # Your ACR service connection name
        repository: '$(ACR_NAME).azurecr.io/$(IMAGE_NAME)'
        command: 'buildAndPush'
        dockerfile: 'Dockerfile'
        buildContext: '.'
        tags: |
          $(TAG)

# --------------------------
# Stage 2: Deploy to ACI
# --------------------------
- stage: Deploy
  displayName: 'Deploy to Azure Container Instance'
  dependsOn: Build
  jobs:
  - job: DeployJob
    displayName: 'Deploy ACR Image to ACI'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to ACI'
      inputs:
        azureSubscription: 'mypip-fixed'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "ðŸš€ Starting deployment to Azure Container Instance..."

          # Variables
          $rg = "$(RESOURCE_GROUP)"
          $container = "$(CONTAINER_NAME)"
          $image = "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG)"
          $location = "$(LOCATION)"

          # Check if container exists
          $exists = az container show --name $container --resource-group $rg --query "name" -o tsv 2>$null

          if ($exists) {
              Write-Host "ðŸ”„ Container instance already exists. Updating with new image..."
              az container delete --name $container --resource-group $rg --yes
              Start-Sleep -Seconds 15
          }

          Write-Host "ðŸ†• Creating container instance $container..."
          az container create `
            --resource-group $rg `
            --name $container `
            --image $image `
            --cpu 1 `
            --memory 1.5 `
            --registry-login-server $(ACR_NAME).azurecr.io `
            --registry-username $(ACR_NAME) `
            --registry-password $(ACR_PASSWORD) `
            --dns-name-label $container `
            --ports 80 `
            --location $location

          Write-Host "âœ… Deployment completed successfully!"
