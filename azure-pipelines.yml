trigger:
- main  # still trigger when YAML changes in main

pool:
  name: Default  # self-hosted agent pool

variables:
  ACR_NAME: 'backendapli'          # Azure Container Registry name
  IMAGE_NAME: 'backendapp'         # Docker image name
  TAG: 'latest'                    # Image tag
  ACI_NAME: 'cracker-backend'      # Azure Container Instance name
  RESOURCE_GROUP: 'myresourcegroup' # Update with your actual resource group
  LOCATION: 'eastus'               # Update with your region (e.g. eastus, centralindia)

stages:
# ────────────────
# Stage 1 — Build and Push Docker Image
# ────────────────
- stage: Build
  displayName: 'Build & Push Docker Image'
  jobs:
  - job: BuildJob
    displayName: 'Build and Push Docker Image'
    steps:

    # Step 1 — Checkout code from master branch
    - checkout: self
      clean: true
      persistCredentials: true
      fetchDepth: 0
      lfs: false

    # Step 2 — Switch to master branch (YAML lives in main)
    - script: |
        echo "Switching to master branch..."
        git fetch origin master
        git checkout master
        git reset --hard origin/master
      displayName: 'Checkout master branch'

    # Step 3 — Login to Azure
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'mypip'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "Checking Azure account..."
          az account show

    # Step 4 — Build & Push Docker Image to ACR
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: 'mypip1'
        repository: '$(ACR_NAME).azurecr.io/$(IMAGE_NAME)'
        command: 'buildAndPush'
        dockerfile: 'Dockerfile'
        buildContext: '.'
        tags: |
          $(TAG)

# ────────────────
# Stage 2 — Deploy Docker Image to Azure Container Instance
# ────────────────
- stage: Deploy
  displayName: 'Deploy to Azure Container Instance'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Deploy Docker Image from ACR to ACI'
    steps:

    # Step 1 — Login to Azure
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'mypip'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "Logging into Azure..."
          az account show

    # Step 2 — Deploy or update ACI container
    - task: AzureCLI@2
      displayName: 'Deploy to Azure Container Instance'
      inputs:
        azureSubscription: 'mypip'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "Starting deployment to Azure Container Instance..."

          # Check if container already exists
          $exists = az container show `
            --name $(ACI_NAME) `
            --resource-group $(RESOURCE_GROUP) `
            --query "name" `
            -o tsv `
            2>$null

          if ($exists) {
            Write-Host "Container $(ACI_NAME) already exists. Updating image..."
            az container delete `
              --name $(ACI_NAME) `
              --resource-group $(RESOURCE_GROUP) `
              --yes

            Write-Host "Recreating container with new image..."
          }

          # Deploy container from ACR image
          az container create `
            --name $(ACI_NAME) `
            --resource-group $(RESOURCE_GROUP) `
            --image $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG) `
            --cpu 1 `
            --memory 1 `
            --registry-login-server $(ACR_NAME).azurecr.io `
            --registry-username $(az acr credential show -n $(ACR_NAME) --query "username" -o tsv) `
            --registry-password $(az acr credential show -n $(ACR_NAME) --query "passwords[0].value" -o tsv) `
            --dns-name-label $(ACI_NAME)-dns `
            --ports 80 `
            --location $(LOCATION) `
            --restart-policy Always

          Write-Host "✅ Deployment to $(ACI_NAME) completed successfully!"
